pipeline {
    agent any
    
    parameters {
        gitParameter name: 'BRANCH_TAG', 
                     type: 'PT_BRANCH_TAG',
                     defaultValue: 'master'
    }
    
    
      environment {
     
        git_url = 'https://github.com/wintel-co-th/kafka-mfec-testcase.git'
        // AZURE RESOURCE
        AcrRegistry = 'wintelhub.azurecr.io'                        // acrth01seanshared01
        AcrRegistry_prod  = 'acrth01seapshared01'


        AZ_AKZ_USER = 'azure-chaiyapon'
        AZ_AKS_RESOUCE_GROUP = 'AKS-Cluster'
        
	 // AZURE AKS Cluster
        az_cluster_name = 'wintel'
        NAMESPACE = 'kafka'  
	
        // Kafka Cluster
        kafka_cluster_name = 'thdlcd3-uat-kafka-cluster'
	kafka_bootstrap_name = 'kafka-bootstrap.thdlcd3-uat.aiaazure.biz'
	
        // Kafka connect
        kafka_connect_name = 'thdlcd3-uat-connect-cluster'	
	
       	//Kafka bridge 

        kafak_bridge_ingres = 'kafka-bridge-thdlcd3-uat.aiaazure.biz'
	
	// authentication
	user_kafka = 'chaiyapon'
	
	// IP edge Node
	
	edge_ip = '20.205.169.228'
	
	

    }

  
    stages {
    
    
           stage('Azure Login'){
            steps {

                 withCredentials([azureServicePrincipal('azure-chaiyapon')]) {
                  sh 'az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID' 
                  sh 'az account show'
            }
       }
    }
         
    
           stage('Get credentials Azure AKS'){
            steps {
                     
                     //cleanup current user k8s credentials
                    sh 'rm -rf   ~/.kube || true'
                    sh "echo ============ AKS Credential ==============="
                    sh "az aks get-credentials -n ${az_cluster_name} -g ${AZ_AKS_RESOUCE_GROUP}"
            }      
       }
    
   
		
		  stage('GitClone') {
              steps {
                script {
                    def scmInfo = checkout([
                        $class: 'GitSCM',
                        branches: [[name: '${BRANCH_TAG}']],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [],
                        submoduleCfg: [],
                        userRemoteConfigs: [
                            [credentialsId: 'git_credentials',
                            url: env.git_url]
                        ]
                    ])
                    
                }
            }
        }
	
	
	
	
	 stage('5.1.1: Testing Connecter Load Data to JDBC Connect') {
             steps {
	              
                  // List connector
                  sh 'kubectl get kctr -n ${NAMESPACE} '
		  // replace env
		  sh "sed -i 's/namespace: .*/namespace: ${NAMESPACE}/'  5.1/jdbc/kafka-jdbc.yaml|| true"
		  sh "sed -i 's|my_connect_cluster|${kafka_connect_name}|g'  5.1/jdbc/kafka-jdbc.yaml|| true"
		  sh "sed -i 's|ip_edge|${edge_ip}|g'  5.1/jdbc/kafka-jdbc.yaml|| true"
		  sh "cat  5.1/jdbc/kafka-jdbc.yaml|| true"
                  //  create JDBC connector
                  sh 'kubectl apply 5.1/jdbc/kafka-jdbc.yaml|| true'
		  sh 'sleep 5m'
		  // verify jdbc connector
		  sh 'kubectl get kctr -n ${NAMESPACE} '
                  

            }
        }
	
		 stage('5.1.2: Testing Connecter Load Data to File Connect') {
             steps {
	              
                  // List connector
                  sh 'kubectl get kctr -n ${NAMESPACE} '
		  // replace env
		  sh "sed -i 's/namespace: .*/namespace: ${NAMESPACE}/'  5.1/file/file-topic.yaml|| true"
		  sh "sed -i 's|kafka-cluster|${kafka_cluster_name}|g' 5.1/file/file-topic.yaml|| true"
		  sh 'kubectl apply 5.1/file/file-topic.yaml|| true'
		  
		  
		   sh "sed -i 's/namespace: .*/namespace: ${NAMESPACE}/' 5.1/file/kafka-file.yaml|| true"
		  sh "sed -i 's|my_connect_cluster|${kafka_connect_name}|g'  5.1/file/kafka-file.yaml|| true"
		  sh "cat  5.1/file/kafka-file.yaml|| true"
                  //  create File connector
                  sh 'kubectl apply 5.1/file/kafka-file.yaml|| true'
		  sh 'sleep 5m'
		  // verify File connector
		  sh 'kubectl get kctr -n ${NAMESPACE} '
                  
                  
            }
        }
	
	 stage('5.1.3: Testing Connecter Load Data to CSV File') {
             steps {
	              
                  // List connector
                  sh 'kubectl get kctr -n ${NAMESPACE} '
		  // replace env
		  sh "sed -i 's/namespace: .*/namespace: ${NAMESPACE}/'  5.1/csv/csv-topic.yaml|| true"
		   sh "sed -i 's|kafka-cluster|${kafka_cluster_name}|g'  5.1/csv/csv-topic.yaml|| true"
		  sh 'kubectl apply 5.1/csv/csv-topic.yaml|| true|| true'
		  
		  sh "sed -i 's/namespace: .*/namespace: ${NAMESPACE}/' 5.1/csv/kafka-csv.yaml|| true"
		  sh "sed -i 's|my_connect_cluster|${kafka_connect_name}|g' 5.1/csv/kafka-csv.yaml|| true"
		  sh "sed -i 's|ip_edge|${edge_ip}|g'  5.1/csv/kafka-csv.yaml|| true"
		  sh "cat  5.1/csv/kafka-csv.yaml|| true"
                  //  create csv connector
                  sh 'kubectl apply 5.1/csv/kafka-csv.yaml|| true'
		  sh 'sleep 5m'
		  // verify csv connector
		  sh 'kubectl get kctr -n ${NAMESPACE} '
                  

            }
        }
        
        
    

        

        
 
        
        

        
       
       
        
    }
   
}
      
