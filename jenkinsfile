pipeline {
    agent any
    
    parameters {
        gitParameter name: 'BRANCH_TAG', 
                     type: 'PT_BRANCH_TAG',
                     defaultValue: 'master'
    }
    
    
      environment {
     
        git_url = 'https://github.com/wintel-co-th/kafka-mfec-testcase.git'
        // AZURE RESOURCE
        AcrRegistry = 'wintelhub.azurecr.io'                        // acrth01seanshared01
        AcrRegistry_prod  = 'acrth01seapshared01'


        AZ_AKZ_USER = 'azure-chaiyapon'
        AZ_AKS_RESOUCE_GROUP = 'AKS-Cluster'
        
	 // AZURE AKS Cluster
        az_cluster_name = 'wintel'
        NAMESPACE = 'kafka'  
	
        // Kafka Cluster
        kafka_cluster_name = 'thdlcd3-uat-kafka-cluster'
	kafk_bootstrap_name = 'kafka-bootstrap.thdlcd3-uat.aiaazure.biz'
	
       	//Kafka bridge 

        kafak_bridge_ingres = 'kafka-bridge-thdlcd3-uat.aiaazure.biz'
	
	// authentication
	user_kafka = 'chaiyapon'
	
	

    }

  
    stages {
    
    
           stage('Azure Login'){
            steps {

                 withCredentials([azureServicePrincipal('azure-chaiyapon')]) {
                  sh 'az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID' 
                  sh 'az account show'
            }
       }
    }
         
    
           stage('Get credentials Azure AKS'){
            steps {
                     
                     //cleanup current user k8s credentials
                    sh 'rm -rf   ~/.kube || true'
                    sh "echo ============ AKS Credential ==============="
                    sh "az aks get-credentials -n ${az_cluster_name} -g ${AZ_AKS_RESOUCE_GROUP}"
            }      
       }
    
   
		
		  stage('GitClone') {
              steps {
                script {
                    def scmInfo = checkout([
                        $class: 'GitSCM',
                        branches: [[name: '${BRANCH_TAG}']],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [],
                        submoduleCfg: [],
                        userRemoteConfigs: [
                            [credentialsId: 'git_credentials',
                            url: env.git_url]
                        ]
                    ])
                    
                }
            }
        }
		
	
	
		 stage('6.2: Testing Create User') {
             steps {
	              
                // list  user
		sh 'kubectl get ku -n ${NAMESPACE} '
		// create user 
	        sh "sed -i 's/namespace: .*/namespace: ${NAMESPACE}/'  6.2/kafka-user.yaml"
		sh "sed -i 's|my-cluster|${kafka_cluster_name}|g'  6.2/kafka-user.yaml"
		sh "sed -i 's|my-user|${user_kafka}|g'  6.2/kafka-user.yaml"
		sh 'kubectl apply -f  6.2/kafka-user.yaml || true'
		//sh 'sleep 2m'
		// check user 
		sh 'kubectl get ku -n ${NAMESPACE}'
		
            
            }
        }
	
	
		 stage('6.3: Testing Kafka User  auth https/ssl') {
             steps {
	              
                // Check  user chaiyapon with tls already exist
		sh 'kubectl get ku -n ${NAMESPACE} '
		
		// Extract and configure the user credentials
	        sh "sed -i 's|my_user|${user_kafka}|g' kafka_user_auth.sh"
		sh "sed -i 's|my_cluster|${kafka_cluster_name}|g' kafka_user_auth.sh"
		sh "sed -i 's|kafka_nemspaces|${NAMESPACE}|g' kafka_user_auth.sh"
		sh "sed -i 's|kafka_bootstrap|${kafk_bootstrap_name}|g' kafka_user_auth.sh"
		//sh 'sh kafka_user_auth.sh'
		sh "kubectl logs "$(kubectl get pods -o name -n kafka |grep -i strimzi-cluster-operator)" -n kafka"

	       
            }
        }
        
	

        

        
 
        
        

        
       
       
        
    }
   
}
      
